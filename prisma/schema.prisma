generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  AppMember AppMember[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Application {
  id             String        @id @default(cuid())
  name           String
  slug           String        @unique
  icon           File?         @relation("Logos", fields: [iconId], references: [id], onDelete: SetNull)
  iconId         String?
  webhook        Webhook?      @relation(fields: [webhookId], references: [id], onDelete: SetNull)
  webhookId      String?
  accessPolicy   AccessPolicy? @relation(fields: [accessPolicyId], references: [id], onDelete: SetNull)
  accessPolicyId String?
  storage        Storage?      @relation(fields: [storageId], references: [id], onDelete: SetNull)
  storageId      String?
  members        AppMember[]
  releases       Release[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model AppMember {
  id            String      @id @default(cuid())
  role          Int // 1. owner 2. manager 3. member
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, applicationId])
}

model AccessPolicy {
  id        String        @id @default(cuid())
  type      Int // 1. public 2. private 3. password
  password  String?
  apps      Application[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Storage {
  id        String        @id @default(cuid())
  type      Int // 1. s3
  config    Json
  apps      Application[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Release {
  id                     String      @id @default(cuid())
  index                  Int
  name                   String
  fingerprint            String
  version                String
  shortVersion           String
  bundleIdentifier       String
  description            String
  commitId               String
  minimumPlatformVersion String
  platformType           Int
  releaseType            Int
  buildType              Int
  file                   File        @relation("Files", fields: [fileId], references: [id], onDelete: Cascade)
  fileId                 String
  icon                   File?       @relation("Icons", fields: [iconId], references: [id], onDelete: SetNull)
  iconId                 String?
  symbol                 File?       @relation("Symbols", fields: [symbolId], references: [id], onDelete: SetNull)
  symbolId               String?
  application            Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId          String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@index([applicationId, index, platformType], name: "application_index")
}

model Webhook {
  id           String        @id @default(cuid())
  name         String
  type         Int
  config       Json
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model File {
  id        String        @id @default(cuid())
  name      String
  path      String
  size      Int
  //  Avatars   User[]        @relation("Avatars")
  Logos     Application[] @relation("Logos")
  Files     Release[]     @relation("Files")
  Icons     Release[]     @relation("Icons")
  Symbols   Release[]     @relation("Symbols")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
